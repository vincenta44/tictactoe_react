{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"wNAkBE,SAASA,EAAOC,GACd,OACE,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACGF,EAAMG,Q,IAKPC,E,kKAUJ,SAAaC,GAAI,IAAD,OACZ,OACE,cAACN,EAAD,CACEI,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,oBAKxC,WACE,OACE,gCACE,sBAAKJ,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,a,GAnCXC,IAAMC,WAyCtBC,E,kDACF,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACXC,QAAS,CACP,CACEN,QAASO,MAAM,GAAGC,KAAK,QAG3BC,WAAY,EACZC,SAAS,GATI,E,+CAajB,SAAYZ,GACV,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EACzCZ,KAAKM,MAAMI,WAAa,GAElBT,EADUM,EAAQA,EAAQM,OAAS,GACjBZ,QAAQW,QAC5BE,EAAgBb,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKM,MAAMK,QAAU,IAAM,IACxCX,KAAKe,SAAS,CACZR,QAASA,EAAQS,OAAO,CACtB,CACEf,QAASA,KAGbS,WAAYH,EAAQM,OACpBF,SAAUX,KAAKM,MAAMK,a,oBAIzB,SAAOM,GACLjB,KAAKe,SAAS,CACZL,WAAYO,EACZN,QAAUM,EAAO,IAAO,M,oBAI5B,WAAU,IAmBJC,EAnBG,OACDX,EAAUP,KAAKM,MAAMC,QACrBY,EACNZ,EAAQP,KAAKM,MAAMI,YACbU,EACNN,EAAgBK,EAAQlB,SAElBoB,EAAQd,EAAQe,KAAI,SAACL,EAAMM,GAC/B,IAAMC,EAAOD,EACX,eAAiBA,EACjB,mBACF,OACE,6BACE,wBAAQ3B,QAAS,kBACf,EAAK6B,OAAOF,IADd,SACsBC,KAFfD,MAeb,OANEL,EADEE,EACO,WAAaA,EAEb,iBACRpB,KAAKM,MAAMK,QAAU,IAAM,KAI5B,sBAAKhB,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,CACEG,QAASkB,EAAQlB,QACjBL,QAAS,SAAAG,GAAC,OAAI,EAAK2B,YAAY3B,QAGnC,sBAAKJ,UAAU,YAAf,UACE,8BAAMuB,IACN,6BAAKG,c,GA9EAlB,IAAMC,WA4FvB,SAASU,EAAgBb,GAWvB,IAVA,IAAM0B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA5B,EAAI,EAAGA,EAAI4B,EAAMd,OAAQd,IAAI,CAClC,kBAAkB4B,EAAM5B,GAAxB,GAAO6B,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAI7B,EAAQ2B,IAAM3B,EAAQ2B,KAAO3B,EAAQ4B,IACzC5B,EAAQ2B,KAAO3B,EAAQ6B,GACnB,OAAO7B,EAAQ2B,GAGvB,OAAO,KAvBTG,IAASC,OACP,cAAC3B,EAAD,IACA4B,SAASC,eAAe,W","file":"static/js/main.f600f774.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n/* OLD SCRIPT\nclass Square extends React.Component {\n    render() {\n      return (\n        <button c\n        lassName=\"square\" \n        onClick={() => this.props.onClick() }>\n          {this.props.value}\n        </button>\n      );\n    }\n  }\n  */\n\n  function Square(props) {\n    return (\n      <button className=\"square\" onClick={props.onClick}>\n        {props.value}\n      </button>\n    );\n  }\n\n  class Board extends React.Component {\n    /* OLD SCRIPT\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(9).fill(null),\n            xIsNExt: true,\n        };\n    }\n    */\n    renderSquare(i) {\n        return (\n          <Square\n            value={this.props.squares[i]}\n            onClick={() => this.props.onClick(i)}\n          />\n        );\n      }\n    \n      render() {\n        return (\n          <div>\n            <div className=\"board-row\">\n              {this.renderSquare(0)}\n              {this.renderSquare(1)}\n              {this.renderSquare(2)}\n            </div>\n            <div className=\"board-row\">\n              {this.renderSquare(3)}\n              {this.renderSquare(4)}\n              {this.renderSquare(5)}\n            </div>\n            <div className=\"board-row\">\n              {this.renderSquare(6)}\n              {this.renderSquare(7)}\n              {this.renderSquare(8)}\n            </div>\n          </div>\n        );\n      }\n    }\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          history: [\n            {\n              squares: Array(9).fill(null)\n            }\n          ],\n          stepNumber: 0,\n          xIsNext: true\n        };\n      }\n    \n      handleClick(i) {\n        const history = this.state.history.slice(0, \n        this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n          return;\n        }\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n        this.setState({\n          history: history.concat([\n            {\n              squares: squares\n            }\n          ]),\n          stepNumber: history.length,\n          xIsNext: !this.state.xIsNext\n        });\n      }\n    \n      jumpTo(step) {\n        this.setState({\n          stepNumber: step,\n          xIsNext: (step % 2) === 0\n        });\n      }\n    \n      render() {\n        const history = this.state.history;\n        const current = \n        history[this.state.stepNumber];\n        const winner = \n        calculateWinner(current.squares);\n    \n        const moves = history.map((step, move) => {\n          const desc = move ?\n            'Go to move #' + move :\n            'Go to game start';\n          return (\n            <li key={move}>\n              <button onClick={() => \n                this.jumpTo(move)}>{desc}</button>\n            </li>\n          );\n        });\n    \n        let status;\n        if (winner) {\n          status = \"Winner: \" + winner;\n        } else {\n          status = \"Next player: \" + \n          (this.state.xIsNext ? \"X\" : \"O\");\n        }\n    \n        return (\n          <div className=\"game\">\n            <div className=\"game-board\">\n              <Board\n                squares={current.squares}\n                onClick={i => this.handleClick(i)}\n              />\n            </div>\n            <div className=\"game-info\">\n              <div>{status}</div>\n              <ol>{moves}</ol>\n            </div>\n          </div>\n        );\n    }\n  }\n\n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n\n  function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++){\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] &&\n        squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n  }\n  "],"sourceRoot":""}